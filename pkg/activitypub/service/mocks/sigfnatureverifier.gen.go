// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"net/http"
	"net/url"
	"sync"
)

type SignatureVerifier struct {
	VerifyRequestStub        func(*http.Request) (bool, *url.URL, error)
	verifyRequestMutex       sync.RWMutex
	verifyRequestArgsForCall []struct {
		arg1 *http.Request
	}
	verifyRequestReturns struct {
		result1 bool
		result2 *url.URL
		result3 error
	}
	verifyRequestReturnsOnCall map[int]struct {
		result1 bool
		result2 *url.URL
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SignatureVerifier) VerifyRequest(arg1 *http.Request) (bool, *url.URL, error) {
	fake.verifyRequestMutex.Lock()
	ret, specificReturn := fake.verifyRequestReturnsOnCall[len(fake.verifyRequestArgsForCall)]
	fake.verifyRequestArgsForCall = append(fake.verifyRequestArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	stub := fake.VerifyRequestStub
	fakeReturns := fake.verifyRequestReturns
	fake.recordInvocation("VerifyRequest", []interface{}{arg1})
	fake.verifyRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *SignatureVerifier) VerifyRequestCallCount() int {
	fake.verifyRequestMutex.RLock()
	defer fake.verifyRequestMutex.RUnlock()
	return len(fake.verifyRequestArgsForCall)
}

func (fake *SignatureVerifier) VerifyRequestCalls(stub func(*http.Request) (bool, *url.URL, error)) {
	fake.verifyRequestMutex.Lock()
	defer fake.verifyRequestMutex.Unlock()
	fake.VerifyRequestStub = stub
}

func (fake *SignatureVerifier) VerifyRequestArgsForCall(i int) *http.Request {
	fake.verifyRequestMutex.RLock()
	defer fake.verifyRequestMutex.RUnlock()
	argsForCall := fake.verifyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *SignatureVerifier) VerifyRequestReturns(result1 bool, result2 *url.URL, result3 error) {
	fake.verifyRequestMutex.Lock()
	defer fake.verifyRequestMutex.Unlock()
	fake.VerifyRequestStub = nil
	fake.verifyRequestReturns = struct {
		result1 bool
		result2 *url.URL
		result3 error
	}{result1, result2, result3}
}

func (fake *SignatureVerifier) VerifyRequestReturnsOnCall(i int, result1 bool, result2 *url.URL, result3 error) {
	fake.verifyRequestMutex.Lock()
	defer fake.verifyRequestMutex.Unlock()
	fake.VerifyRequestStub = nil
	if fake.verifyRequestReturnsOnCall == nil {
		fake.verifyRequestReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 *url.URL
			result3 error
		})
	}
	fake.verifyRequestReturnsOnCall[i] = struct {
		result1 bool
		result2 *url.URL
		result3 error
	}{result1, result2, result3}
}

func (fake *SignatureVerifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.verifyRequestMutex.RLock()
	defer fake.verifyRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SignatureVerifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
