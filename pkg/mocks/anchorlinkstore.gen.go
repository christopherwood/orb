// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"net/url"
	"sync"
)

type AnchorLinkStore struct {
	DeleteLinksStub        func([]*url.URL) error
	deleteLinksMutex       sync.RWMutex
	deleteLinksArgsForCall []struct {
		arg1 []*url.URL
	}
	deleteLinksReturns struct {
		result1 error
	}
	deleteLinksReturnsOnCall map[int]struct {
		result1 error
	}
	DeletePendingLinksStub        func([]*url.URL) error
	deletePendingLinksMutex       sync.RWMutex
	deletePendingLinksArgsForCall []struct {
		arg1 []*url.URL
	}
	deletePendingLinksReturns struct {
		result1 error
	}
	deletePendingLinksReturnsOnCall map[int]struct {
		result1 error
	}
	GetLinksStub        func(string) ([]*url.URL, error)
	getLinksMutex       sync.RWMutex
	getLinksArgsForCall []struct {
		arg1 string
	}
	getLinksReturns struct {
		result1 []*url.URL
		result2 error
	}
	getLinksReturnsOnCall map[int]struct {
		result1 []*url.URL
		result2 error
	}
	PutLinksStub        func([]*url.URL) error
	putLinksMutex       sync.RWMutex
	putLinksArgsForCall []struct {
		arg1 []*url.URL
	}
	putLinksReturns struct {
		result1 error
	}
	putLinksReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AnchorLinkStore) DeleteLinks(arg1 []*url.URL) error {
	var arg1Copy []*url.URL
	if arg1 != nil {
		arg1Copy = make([]*url.URL, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deleteLinksMutex.Lock()
	ret, specificReturn := fake.deleteLinksReturnsOnCall[len(fake.deleteLinksArgsForCall)]
	fake.deleteLinksArgsForCall = append(fake.deleteLinksArgsForCall, struct {
		arg1 []*url.URL
	}{arg1Copy})
	stub := fake.DeleteLinksStub
	fakeReturns := fake.deleteLinksReturns
	fake.recordInvocation("DeleteLinks", []interface{}{arg1Copy})
	fake.deleteLinksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *AnchorLinkStore) DeleteLinksCallCount() int {
	fake.deleteLinksMutex.RLock()
	defer fake.deleteLinksMutex.RUnlock()
	return len(fake.deleteLinksArgsForCall)
}

func (fake *AnchorLinkStore) DeleteLinksCalls(stub func([]*url.URL) error) {
	fake.deleteLinksMutex.Lock()
	defer fake.deleteLinksMutex.Unlock()
	fake.DeleteLinksStub = stub
}

func (fake *AnchorLinkStore) DeleteLinksArgsForCall(i int) []*url.URL {
	fake.deleteLinksMutex.RLock()
	defer fake.deleteLinksMutex.RUnlock()
	argsForCall := fake.deleteLinksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AnchorLinkStore) DeleteLinksReturns(result1 error) {
	fake.deleteLinksMutex.Lock()
	defer fake.deleteLinksMutex.Unlock()
	fake.DeleteLinksStub = nil
	fake.deleteLinksReturns = struct {
		result1 error
	}{result1}
}

func (fake *AnchorLinkStore) DeleteLinksReturnsOnCall(i int, result1 error) {
	fake.deleteLinksMutex.Lock()
	defer fake.deleteLinksMutex.Unlock()
	fake.DeleteLinksStub = nil
	if fake.deleteLinksReturnsOnCall == nil {
		fake.deleteLinksReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteLinksReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *AnchorLinkStore) DeletePendingLinks(arg1 []*url.URL) error {
	var arg1Copy []*url.URL
	if arg1 != nil {
		arg1Copy = make([]*url.URL, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deletePendingLinksMutex.Lock()
	ret, specificReturn := fake.deletePendingLinksReturnsOnCall[len(fake.deletePendingLinksArgsForCall)]
	fake.deletePendingLinksArgsForCall = append(fake.deletePendingLinksArgsForCall, struct {
		arg1 []*url.URL
	}{arg1Copy})
	stub := fake.DeletePendingLinksStub
	fakeReturns := fake.deletePendingLinksReturns
	fake.recordInvocation("DeletePendingLinks", []interface{}{arg1Copy})
	fake.deletePendingLinksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *AnchorLinkStore) DeletePendingLinksCallCount() int {
	fake.deletePendingLinksMutex.RLock()
	defer fake.deletePendingLinksMutex.RUnlock()
	return len(fake.deletePendingLinksArgsForCall)
}

func (fake *AnchorLinkStore) DeletePendingLinksCalls(stub func([]*url.URL) error) {
	fake.deletePendingLinksMutex.Lock()
	defer fake.deletePendingLinksMutex.Unlock()
	fake.DeletePendingLinksStub = stub
}

func (fake *AnchorLinkStore) DeletePendingLinksArgsForCall(i int) []*url.URL {
	fake.deletePendingLinksMutex.RLock()
	defer fake.deletePendingLinksMutex.RUnlock()
	argsForCall := fake.deletePendingLinksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AnchorLinkStore) DeletePendingLinksReturns(result1 error) {
	fake.deletePendingLinksMutex.Lock()
	defer fake.deletePendingLinksMutex.Unlock()
	fake.DeletePendingLinksStub = nil
	fake.deletePendingLinksReturns = struct {
		result1 error
	}{result1}
}

func (fake *AnchorLinkStore) DeletePendingLinksReturnsOnCall(i int, result1 error) {
	fake.deletePendingLinksMutex.Lock()
	defer fake.deletePendingLinksMutex.Unlock()
	fake.DeletePendingLinksStub = nil
	if fake.deletePendingLinksReturnsOnCall == nil {
		fake.deletePendingLinksReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deletePendingLinksReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *AnchorLinkStore) GetLinks(arg1 string) ([]*url.URL, error) {
	fake.getLinksMutex.Lock()
	ret, specificReturn := fake.getLinksReturnsOnCall[len(fake.getLinksArgsForCall)]
	fake.getLinksArgsForCall = append(fake.getLinksArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetLinksStub
	fakeReturns := fake.getLinksReturns
	fake.recordInvocation("GetLinks", []interface{}{arg1})
	fake.getLinksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AnchorLinkStore) GetLinksCallCount() int {
	fake.getLinksMutex.RLock()
	defer fake.getLinksMutex.RUnlock()
	return len(fake.getLinksArgsForCall)
}

func (fake *AnchorLinkStore) GetLinksCalls(stub func(string) ([]*url.URL, error)) {
	fake.getLinksMutex.Lock()
	defer fake.getLinksMutex.Unlock()
	fake.GetLinksStub = stub
}

func (fake *AnchorLinkStore) GetLinksArgsForCall(i int) string {
	fake.getLinksMutex.RLock()
	defer fake.getLinksMutex.RUnlock()
	argsForCall := fake.getLinksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AnchorLinkStore) GetLinksReturns(result1 []*url.URL, result2 error) {
	fake.getLinksMutex.Lock()
	defer fake.getLinksMutex.Unlock()
	fake.GetLinksStub = nil
	fake.getLinksReturns = struct {
		result1 []*url.URL
		result2 error
	}{result1, result2}
}

func (fake *AnchorLinkStore) GetLinksReturnsOnCall(i int, result1 []*url.URL, result2 error) {
	fake.getLinksMutex.Lock()
	defer fake.getLinksMutex.Unlock()
	fake.GetLinksStub = nil
	if fake.getLinksReturnsOnCall == nil {
		fake.getLinksReturnsOnCall = make(map[int]struct {
			result1 []*url.URL
			result2 error
		})
	}
	fake.getLinksReturnsOnCall[i] = struct {
		result1 []*url.URL
		result2 error
	}{result1, result2}
}

func (fake *AnchorLinkStore) PutLinks(arg1 []*url.URL) error {
	var arg1Copy []*url.URL
	if arg1 != nil {
		arg1Copy = make([]*url.URL, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.putLinksMutex.Lock()
	ret, specificReturn := fake.putLinksReturnsOnCall[len(fake.putLinksArgsForCall)]
	fake.putLinksArgsForCall = append(fake.putLinksArgsForCall, struct {
		arg1 []*url.URL
	}{arg1Copy})
	stub := fake.PutLinksStub
	fakeReturns := fake.putLinksReturns
	fake.recordInvocation("PutLinks", []interface{}{arg1Copy})
	fake.putLinksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *AnchorLinkStore) PutLinksCallCount() int {
	fake.putLinksMutex.RLock()
	defer fake.putLinksMutex.RUnlock()
	return len(fake.putLinksArgsForCall)
}

func (fake *AnchorLinkStore) PutLinksCalls(stub func([]*url.URL) error) {
	fake.putLinksMutex.Lock()
	defer fake.putLinksMutex.Unlock()
	fake.PutLinksStub = stub
}

func (fake *AnchorLinkStore) PutLinksArgsForCall(i int) []*url.URL {
	fake.putLinksMutex.RLock()
	defer fake.putLinksMutex.RUnlock()
	argsForCall := fake.putLinksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AnchorLinkStore) PutLinksReturns(result1 error) {
	fake.putLinksMutex.Lock()
	defer fake.putLinksMutex.Unlock()
	fake.PutLinksStub = nil
	fake.putLinksReturns = struct {
		result1 error
	}{result1}
}

func (fake *AnchorLinkStore) PutLinksReturnsOnCall(i int, result1 error) {
	fake.putLinksMutex.Lock()
	defer fake.putLinksMutex.Unlock()
	fake.PutLinksStub = nil
	if fake.putLinksReturnsOnCall == nil {
		fake.putLinksReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putLinksReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *AnchorLinkStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteLinksMutex.RLock()
	defer fake.deleteLinksMutex.RUnlock()
	fake.deletePendingLinksMutex.RLock()
	defer fake.deletePendingLinksMutex.RUnlock()
	fake.getLinksMutex.RLock()
	defer fake.getLinksMutex.RUnlock()
	fake.putLinksMutex.RLock()
	defer fake.putLinksMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AnchorLinkStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
