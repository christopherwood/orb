// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"net/url"
	"sync"
)

type AnchorLinkStore struct {
	GetProcessedAndPendingLinksStub        func(string) ([]*url.URL, error)
	getProcessedAndPendingLinksMutex       sync.RWMutex
	getProcessedAndPendingLinksArgsForCall []struct {
		arg1 string
	}
	getProcessedAndPendingLinksReturns struct {
		result1 []*url.URL
		result2 error
	}
	getProcessedAndPendingLinksReturnsOnCall map[int]struct {
		result1 []*url.URL
		result2 error
	}
	PutPendingLinksStub        func([]*url.URL) error
	putPendingLinksMutex       sync.RWMutex
	putPendingLinksArgsForCall []struct {
		arg1 []*url.URL
	}
	putPendingLinksReturns struct {
		result1 error
	}
	putPendingLinksReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AnchorLinkStore) GetProcessedAndPendingLinks(arg1 string) ([]*url.URL, error) {
	fake.getProcessedAndPendingLinksMutex.Lock()
	ret, specificReturn := fake.getProcessedAndPendingLinksReturnsOnCall[len(fake.getProcessedAndPendingLinksArgsForCall)]
	fake.getProcessedAndPendingLinksArgsForCall = append(fake.getProcessedAndPendingLinksArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetProcessedAndPendingLinksStub
	fakeReturns := fake.getProcessedAndPendingLinksReturns
	fake.recordInvocation("GetProcessedAndPendingLinks", []interface{}{arg1})
	fake.getProcessedAndPendingLinksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AnchorLinkStore) GetProcessedAndPendingLinksCallCount() int {
	fake.getProcessedAndPendingLinksMutex.RLock()
	defer fake.getProcessedAndPendingLinksMutex.RUnlock()
	return len(fake.getProcessedAndPendingLinksArgsForCall)
}

func (fake *AnchorLinkStore) GetProcessedAndPendingLinksCalls(stub func(string) ([]*url.URL, error)) {
	fake.getProcessedAndPendingLinksMutex.Lock()
	defer fake.getProcessedAndPendingLinksMutex.Unlock()
	fake.GetProcessedAndPendingLinksStub = stub
}

func (fake *AnchorLinkStore) GetProcessedAndPendingLinksArgsForCall(i int) string {
	fake.getProcessedAndPendingLinksMutex.RLock()
	defer fake.getProcessedAndPendingLinksMutex.RUnlock()
	argsForCall := fake.getProcessedAndPendingLinksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AnchorLinkStore) GetProcessedAndPendingLinksReturns(result1 []*url.URL, result2 error) {
	fake.getProcessedAndPendingLinksMutex.Lock()
	defer fake.getProcessedAndPendingLinksMutex.Unlock()
	fake.GetProcessedAndPendingLinksStub = nil
	fake.getProcessedAndPendingLinksReturns = struct {
		result1 []*url.URL
		result2 error
	}{result1, result2}
}

func (fake *AnchorLinkStore) GetProcessedAndPendingLinksReturnsOnCall(i int, result1 []*url.URL, result2 error) {
	fake.getProcessedAndPendingLinksMutex.Lock()
	defer fake.getProcessedAndPendingLinksMutex.Unlock()
	fake.GetProcessedAndPendingLinksStub = nil
	if fake.getProcessedAndPendingLinksReturnsOnCall == nil {
		fake.getProcessedAndPendingLinksReturnsOnCall = make(map[int]struct {
			result1 []*url.URL
			result2 error
		})
	}
	fake.getProcessedAndPendingLinksReturnsOnCall[i] = struct {
		result1 []*url.URL
		result2 error
	}{result1, result2}
}

func (fake *AnchorLinkStore) PutPendingLinks(arg1 []*url.URL) error {
	var arg1Copy []*url.URL
	if arg1 != nil {
		arg1Copy = make([]*url.URL, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.putPendingLinksMutex.Lock()
	ret, specificReturn := fake.putPendingLinksReturnsOnCall[len(fake.putPendingLinksArgsForCall)]
	fake.putPendingLinksArgsForCall = append(fake.putPendingLinksArgsForCall, struct {
		arg1 []*url.URL
	}{arg1Copy})
	stub := fake.PutPendingLinksStub
	fakeReturns := fake.putPendingLinksReturns
	fake.recordInvocation("PutPendingLinks", []interface{}{arg1Copy})
	fake.putPendingLinksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *AnchorLinkStore) PutPendingLinksCallCount() int {
	fake.putPendingLinksMutex.RLock()
	defer fake.putPendingLinksMutex.RUnlock()
	return len(fake.putPendingLinksArgsForCall)
}

func (fake *AnchorLinkStore) PutPendingLinksCalls(stub func([]*url.URL) error) {
	fake.putPendingLinksMutex.Lock()
	defer fake.putPendingLinksMutex.Unlock()
	fake.PutPendingLinksStub = stub
}

func (fake *AnchorLinkStore) PutPendingLinksArgsForCall(i int) []*url.URL {
	fake.putPendingLinksMutex.RLock()
	defer fake.putPendingLinksMutex.RUnlock()
	argsForCall := fake.putPendingLinksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AnchorLinkStore) PutPendingLinksReturns(result1 error) {
	fake.putPendingLinksMutex.Lock()
	defer fake.putPendingLinksMutex.Unlock()
	fake.PutPendingLinksStub = nil
	fake.putPendingLinksReturns = struct {
		result1 error
	}{result1}
}

func (fake *AnchorLinkStore) PutPendingLinksReturnsOnCall(i int, result1 error) {
	fake.putPendingLinksMutex.Lock()
	defer fake.putPendingLinksMutex.Unlock()
	fake.PutPendingLinksStub = nil
	if fake.putPendingLinksReturnsOnCall == nil {
		fake.putPendingLinksReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putPendingLinksReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *AnchorLinkStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProcessedAndPendingLinksMutex.RLock()
	defer fake.getProcessedAndPendingLinksMutex.RUnlock()
	fake.putPendingLinksMutex.RLock()
	defer fake.putPendingLinksMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AnchorLinkStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
