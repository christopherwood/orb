// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/trustbloc/orb/pkg/anchor/info"
)

type AnchorPublisher struct {
	PublishAnchorStub        func(context.Context, *info.AnchorInfo) error
	publishAnchorMutex       sync.RWMutex
	publishAnchorArgsForCall []struct {
		arg1 context.Context
		arg2 *info.AnchorInfo
	}
	publishAnchorReturns struct {
		result1 error
	}
	publishAnchorReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AnchorPublisher) PublishAnchor(arg1 context.Context, arg2 *info.AnchorInfo) error {
	fake.publishAnchorMutex.Lock()
	ret, specificReturn := fake.publishAnchorReturnsOnCall[len(fake.publishAnchorArgsForCall)]
	fake.publishAnchorArgsForCall = append(fake.publishAnchorArgsForCall, struct {
		arg1 context.Context
		arg2 *info.AnchorInfo
	}{arg1, arg2})
	stub := fake.PublishAnchorStub
	fakeReturns := fake.publishAnchorReturns
	fake.recordInvocation("PublishAnchor", []interface{}{arg1, arg2})
	fake.publishAnchorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *AnchorPublisher) PublishAnchorCallCount() int {
	fake.publishAnchorMutex.RLock()
	defer fake.publishAnchorMutex.RUnlock()
	return len(fake.publishAnchorArgsForCall)
}

func (fake *AnchorPublisher) PublishAnchorCalls(stub func(context.Context, *info.AnchorInfo) error) {
	fake.publishAnchorMutex.Lock()
	defer fake.publishAnchorMutex.Unlock()
	fake.PublishAnchorStub = stub
}

func (fake *AnchorPublisher) PublishAnchorArgsForCall(i int) (context.Context, *info.AnchorInfo) {
	fake.publishAnchorMutex.RLock()
	defer fake.publishAnchorMutex.RUnlock()
	argsForCall := fake.publishAnchorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AnchorPublisher) PublishAnchorReturns(result1 error) {
	fake.publishAnchorMutex.Lock()
	defer fake.publishAnchorMutex.Unlock()
	fake.PublishAnchorStub = nil
	fake.publishAnchorReturns = struct {
		result1 error
	}{result1}
}

func (fake *AnchorPublisher) PublishAnchorReturnsOnCall(i int, result1 error) {
	fake.publishAnchorMutex.Lock()
	defer fake.publishAnchorMutex.Unlock()
	fake.PublishAnchorStub = nil
	if fake.publishAnchorReturnsOnCall == nil {
		fake.publishAnchorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.publishAnchorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *AnchorPublisher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.publishAnchorMutex.RLock()
	defer fake.publishAnchorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AnchorPublisher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
