// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/orb/pkg/discovery/endpoint/client/models"
)

type EndpointClient struct {
	GetEndpointFromAnchorOriginStub        func(string) (*models.Endpoint, error)
	getEndpointFromAnchorOriginMutex       sync.RWMutex
	getEndpointFromAnchorOriginArgsForCall []struct {
		arg1 string
	}
	getEndpointFromAnchorOriginReturns struct {
		result1 *models.Endpoint
		result2 error
	}
	getEndpointFromAnchorOriginReturnsOnCall map[int]struct {
		result1 *models.Endpoint
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EndpointClient) GetEndpointFromAnchorOrigin(arg1 string) (*models.Endpoint, error) {
	fake.getEndpointFromAnchorOriginMutex.Lock()
	ret, specificReturn := fake.getEndpointFromAnchorOriginReturnsOnCall[len(fake.getEndpointFromAnchorOriginArgsForCall)]
	fake.getEndpointFromAnchorOriginArgsForCall = append(fake.getEndpointFromAnchorOriginArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetEndpointFromAnchorOriginStub
	fakeReturns := fake.getEndpointFromAnchorOriginReturns
	fake.recordInvocation("GetEndpointFromAnchorOrigin", []interface{}{arg1})
	fake.getEndpointFromAnchorOriginMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *EndpointClient) GetEndpointFromAnchorOriginCallCount() int {
	fake.getEndpointFromAnchorOriginMutex.RLock()
	defer fake.getEndpointFromAnchorOriginMutex.RUnlock()
	return len(fake.getEndpointFromAnchorOriginArgsForCall)
}

func (fake *EndpointClient) GetEndpointFromAnchorOriginCalls(stub func(string) (*models.Endpoint, error)) {
	fake.getEndpointFromAnchorOriginMutex.Lock()
	defer fake.getEndpointFromAnchorOriginMutex.Unlock()
	fake.GetEndpointFromAnchorOriginStub = stub
}

func (fake *EndpointClient) GetEndpointFromAnchorOriginArgsForCall(i int) string {
	fake.getEndpointFromAnchorOriginMutex.RLock()
	defer fake.getEndpointFromAnchorOriginMutex.RUnlock()
	argsForCall := fake.getEndpointFromAnchorOriginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *EndpointClient) GetEndpointFromAnchorOriginReturns(result1 *models.Endpoint, result2 error) {
	fake.getEndpointFromAnchorOriginMutex.Lock()
	defer fake.getEndpointFromAnchorOriginMutex.Unlock()
	fake.GetEndpointFromAnchorOriginStub = nil
	fake.getEndpointFromAnchorOriginReturns = struct {
		result1 *models.Endpoint
		result2 error
	}{result1, result2}
}

func (fake *EndpointClient) GetEndpointFromAnchorOriginReturnsOnCall(i int, result1 *models.Endpoint, result2 error) {
	fake.getEndpointFromAnchorOriginMutex.Lock()
	defer fake.getEndpointFromAnchorOriginMutex.Unlock()
	fake.GetEndpointFromAnchorOriginStub = nil
	if fake.getEndpointFromAnchorOriginReturnsOnCall == nil {
		fake.getEndpointFromAnchorOriginReturnsOnCall = make(map[int]struct {
			result1 *models.Endpoint
			result2 error
		})
	}
	fake.getEndpointFromAnchorOriginReturnsOnCall[i] = struct {
		result1 *models.Endpoint
		result2 error
	}{result1, result2}
}

func (fake *EndpointClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getEndpointFromAnchorOriginMutex.RLock()
	defer fake.getEndpointFromAnchorOriginMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EndpointClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
